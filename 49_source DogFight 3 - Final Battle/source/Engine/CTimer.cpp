////////////////////////////////////////////////////////////////////
//								  //
//			    CTimer			  	  //
//								  //
//	     Made By: Tommy Kobberø Andersen			  //
//								  //
////////////////////////////////////////////////////////////////////

#include "CTimer.h"

//--------------------------------------------------------------------------------
char *CTimer::Get_Error_Message(){return Error_Message;}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
bool CTimer::Error_Check(){return Error_Detected;}
//--------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------
void CTimer::Reset()
//----------------------------------------------------------------------------------------------
{
if(Error_Detected == true)return;

try
  {
  while(!QueryPerformanceCounter(&m_nLastTime));
  }
catch(...)
  {
  Error_Detected = true;
  memcpy(Error_Message,"Error in Timer_Reset",45);
  }
}
//----------------------------------------------------------------------------------------------
void CTimer::Init()
//----------------------------------------------------------------------------------------------
{
if(Error_Detected == true)return;

try
  {
  QueryPerformanceFrequency(&m_nTimingFreq);
  Reset();
  }
catch(...)
  {
  Error_Detected = true;
  memcpy(Error_Message,"Error in Timer_Init",45);
  }
}
//----------------------------------------------------------------------------------------------
void CTimer::Run()
//----------------------------------------------------------------------------------------------
{
if(Error_Detected == true)return;

try
  {
  LARGE_INTEGER nTime; 
  while (!QueryPerformanceCounter(&nTime));
  nTime.QuadPart-=m_nLastTime.QuadPart;
  double fUsed=((double)m_nTimingFreq.QuadPart)/((double)nTime.QuadPart);
  DTick = 1000.0f/fUsed;
  Reset();
  }
catch(...)
  {
  Error_Detected = true;
  memcpy(Error_Message,"Error in Timer_Run",45);
  }
}
//----------------------------------------------------------------------------------------------
double CTimer::GetDeltaMs(){if(Error_Detected == true){return 0.0f;}return DTick;}
//----------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------
CTimer::CTimer()
//----------------------------------------------------------------------------------------------
{
Error_Detected = false;
}

//----------------------------------------------------------------------------------------------
CTimer::~CTimer()
//----------------------------------------------------------------------------------------------
{

}